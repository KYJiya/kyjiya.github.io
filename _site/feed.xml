<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://kyjiya.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kyjiya.github.io/" rel="alternate" type="text/html" /><updated>2021-09-15T00:09:42+09:00</updated><id>https://kyjiya.github.io/feed.xml</id><title type="html">Dajun’s Creed</title><subtitle>Shiftone Co., Ltd. Backend Development Manager Kwon Yong Jun</subtitle><author><name>Kwon Yong Jun</name></author><entry><title type="html">kube-scheduler install via snap</title><link href="https://kyjiya.github.io/2021/09/14/0003-kube-scheduler-install-via-snap.html" rel="alternate" type="text/html" title="kube-scheduler install via snap" /><published>2021-09-14T09:16:13+09:00</published><updated>2021-09-14T09:16:13+09:00</updated><id>https://kyjiya.github.io/2021/09/14/0003-kube-scheduler%20install%20via%20snap</id><content type="html" xml:base="https://kyjiya.github.io/2021/09/14/0003-kube-scheduler-install-via-snap.html">&lt;h1 id=&quot;snap을-통해-kube-scheduler를-설치해-보자&quot;&gt;Snap을 통해 kube-scheduler를 설치해 보자.&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo snap install kube-scheduler
kube-scheduler 1.21.4 from Canonical✓ installed

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Kwon Yong Jun</name></author><summary type="html">Snap을 통해 kube-scheduler를 설치해 보자. ``` $ sudo snap install kube-scheduler kube-scheduler 1.21.4 from Canonical✓ installed</summary></entry><entry><title type="html">kube-apiserver install via snap</title><link href="https://kyjiya.github.io/2021/09/14/0002-kube-apiserver-install-via-snap.html" rel="alternate" type="text/html" title="kube-apiserver install via snap" /><published>2021-09-14T09:16:13+09:00</published><updated>2021-09-14T09:16:13+09:00</updated><id>https://kyjiya.github.io/2021/09/14/0002-kube-apiserver%20install%20via%20snap</id><content type="html" xml:base="https://kyjiya.github.io/2021/09/14/0002-kube-apiserver-install-via-snap.html">&lt;h1 id=&quot;snap을-통해-kube-apiserver를-설치해-보자&quot;&gt;Snap을 통해 kube-apiserver를 설치해 보자.&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo snap install kube-apiserver
kube-apiserver 1.21.4 from Canonical✓ installed

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Kwon Yong Jun</name></author><summary type="html">Snap을 통해 kube-apiserver를 설치해 보자. ``` $ sudo snap install kube-apiserver kube-apiserver 1.21.4 from Canonical✓ installed</summary></entry><entry><title type="html">WSL2 - Ubuntu 20.04 Snap store doesn’t work due to systemd dependency</title><link href="https://kyjiya.github.io/2021/09/14/0001-WSL2-Ubuntu-20.04-Snap-store-doesn't-work-due-to-systemd-dependency.html" rel="alternate" type="text/html" title="WSL2 - Ubuntu 20.04 Snap store doesn’t work due to systemd dependency" /><published>2021-09-14T09:16:13+09:00</published><updated>2021-09-14T09:16:13+09:00</updated><id>https://kyjiya.github.io/2021/09/14/0001-WSL2%20-%20Ubuntu%2020.04%20Snap%20store%20doesn&apos;t%20work%20due%20to%20systemd%20dependency</id><content type="html" xml:base="https://kyjiya.github.io/2021/09/14/0001-WSL2-Ubuntu-20.04-Snap-store-doesn&apos;t-work-due-to-systemd-dependency.html">&lt;h1 id=&quot;wsl2-ubuntu-2004-에서-snap-store-가-작동하지-않는다&quot;&gt;WSL2 Ubuntu 20.04 에서 Snap store 가 작동하지 않는다.&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;-작동하지-않는-현상-확인&quot;&gt;* 작동하지 않는 현상 확인.&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ snap version
snap    2.49.2+20.04
snapd   unavailable
series  -

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-해결책&quot;&gt;* 해결책&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get update 
$ sudo apt-get install -yqq daemonize dbus-user-session fontconfig
$ sudo daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target
$ exec sudo nsenter -t $(pidof systemd) -a su - $LOGNAME

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-해결되었는지-확인&quot;&gt;* 해결되었는지 확인&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ snap version
snap    2.51.3
snapd   2.51.3
series  16
ubuntu  20.04
kernel  5.10.16.3-microsoft-standard-WSL2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;-출처--httpsgithubcommicrosoftwslissues5126&quot;&gt;* 출처 : &lt;a href=&quot;https://github.com/microsoft/WSL/issues/5126&quot;&gt;https://github.com/microsoft/WSL/issues/5126&lt;/a&gt;&lt;/h6&gt;</content><author><name>Kwon Yong Jun</name></author><summary type="html">WSL2 Ubuntu 20.04 에서 Snap store 가 작동하지 않는다. * 작동하지 않는 현상 확인.</summary></entry><entry><title type="html">항상 그만두기</title><link href="https://kyjiya.github.io/2021/08/06/0002-%ED%95%AD%EC%83%81-%EA%B7%B8%EB%A7%8C%EB%91%90%EA%B8%B0.html" rel="alternate" type="text/html" title="항상 그만두기" /><published>2021-08-06T05:01:13+09:00</published><updated>2021-08-06T05:01:13+09:00</updated><id>https://kyjiya.github.io/2021/08/06/0002-%ED%95%AD%EC%83%81%20%EA%B7%B8%EB%A7%8C%EB%91%90%EA%B8%B0</id><content type="html" xml:base="https://kyjiya.github.io/2021/08/06/0002-%ED%95%AD%EC%83%81-%EA%B7%B8%EB%A7%8C%EB%91%90%EA%B8%B0.html">&lt;ul&gt;
  &lt;li&gt;직장에서 생활하는 좋은 철학은 “Always be quitting”&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;계속 퇴사할 생각을 하라는 게 아니라, 언제라도 떠날 수 있게 행동 하라는 것&lt;br /&gt;
→ 이게 자신을 더 좋은 엔지니어로 만들고, 성장 기회를 열어줌&lt;br /&gt;
→ “자신을 대체 가능하게 만드는 것” , “직장에서 자신의 업무를 자동화하기” 와 비슷&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;핵심은 “필수가 아니게” 하는 것 : NOT being indispensable&lt;br /&gt;
→ 필수가 되어 버리면, 특정 Job에 갇히게 되고 휴가도 성장도 없어짐&lt;br /&gt;
→ 그 Job이 불 필요해지면 내 자리도 필요 없어짐&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;역설적이지만, 1회용(Disposable)이 되는 것이 당신을 자유롭게 함&lt;br /&gt;
→ 더 높은 역할로 성장하는게 쉬워지고, 작업하고 있는 프로젝트를 쉽게 변경 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;구체적으로 하는 방법들&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;지식을 문서화 하세요.&lt;br /&gt;
→ 누군가 당신에게 질문하는건 당신이 만든 문서의 공백을 알려주는 것.&lt;br /&gt;
→ 후임자가 당신이 필요없도록 문서,버그,코드 주석등 어디에든 답을 적어두세요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;장기 계획을 문서화 하세요.&lt;br /&gt;
→ 당신이 뭔가를 실시간으로 알려주지 않더라도, 이 계획을 보고 프로젝트에 앞으로 어떤 일이 생길지를 알수 있게 하세요.&lt;br /&gt;
→ 몇달전 부터 계획을 세워두어서, 당신이 떠나더라도 동료들이 첫날부터 헤메지 않게 해주세요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;미팅을 문서화 하세요.&lt;br /&gt;
→ 당신이 참석하는 모든 미팅을 문서화 하고 팀내에 공유하고, 누가 참석했는지, 어떤 논의가 있었고, 어떻게 결론내었는지를 적으세요.&lt;br /&gt;
→ 이 회의록을 설계 문서에서 참조하세요. 후임자는 캐치업하기 위해 이걸 필요로 할겁니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 사람들을 회의에 초대하세요.&lt;br /&gt;
→ 1대1 미팅이 아니고, 당신의 팀에서 혼자 미팅에 참가중이라면 다른 사람을 더 초대하세요.&lt;br /&gt;
→ 다른 관점도 유용하지만, 중요한건 당신이 유일한 컨택포인트가 되는 것을 피하는 것입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주변 사람들을 훈련 시키세요.&lt;br /&gt;
→ 목표는 그들이 독립적이 되도록 하는 것입니다. (일반적인 엔지니어링 Ladder에서 시니어라고 얘기되는 것)&lt;br /&gt;
→ 그들이 계획과 기술들을 숙지하게 하고, 문서를 활용할 수 있도록 하세요&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;후임자를 찾고 교육하세요.&lt;br /&gt;
→ 당신의 역할(Role)을 바꾸려면 교체할수 있어야 합니다. 당신을 대체할 사람을 찾고 적극적/지속적으로 코치하세요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사람들에게 권한(Power)을 주세요.&lt;br /&gt;
→ 그들이 옳은 일을 하게 믿어주세요.&lt;br /&gt;
→ 당신이 리더십 위치에 있다면, 다른사람들이 당신에게 허락을 요청하도록 만들지 마세요.&lt;br /&gt;
→ 그들이 스스로 선택하게 하고, 올바른 데이터를 기반으로 선택하도록 가이드하세요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;당신이 PoC(Point of Contact)가 되지 마세요.&lt;br /&gt;
→ 다른 사람을 포함시킬수 있는 메일링 리스트를 만들거나 다른 종류의 커뮤니케이션 채널을 만들고 그걸 확장 하세요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위임하세요(Delegate)&lt;br /&gt;
→ 다른 사람에게 권한을 주고, 그룹과 미팅에 포함시키고, 지식을 문서화 했다면, 당신의 일을 수행할 준비가 된것입니다.&lt;br /&gt;
→ 그들이 성장할 수 있는 일들을 위임하고, 당신만이 할 수 있는 일에 집중하세요/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;항상 배우세요.&lt;br /&gt;
→ 관심있는 분야에서 지식을 키우고, 재미있게 유지하세요.&lt;br /&gt;
→ 그 분야가 당신이 가고자 하는 미래와 일치하면 보너스!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이것들이 책임에 대한 포기를 의미하지는 않습니다.&lt;br /&gt;
→ 여전히 당신의 프로젝트와 팀에 대해서 책임을 져야하고, 당신의 역할을 수행하는 한 지속해야 합니다.&lt;br /&gt;
→ 이 책임이 당신에게 새로운 문을 열어줄 것이기 때문에 중요합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 모든 작업을 수행한다면, 자신 뿐만 아니라 전체 팀을 더 좋게 만들게 됩니다.&lt;br /&gt;
→ 당신이 IC(Individual Contributor, 관리직이 아닌) 일때도 가능하며, 실제로는 Staff/Principal+ 엔지니어의 스킬중 일부를 연습하는게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://news.hada.io/topic?id=4442&quot; style=&quot;text-decoration:none&quot;&gt;https://news.hada.io/topic?id=4442&lt;/a&gt;&lt;/p&gt;</content><author><name>Kwon Yong Jun</name></author><summary type="html">직장에서 생활하는 좋은 철학은 “Always be quitting” 계속 퇴사할 생각을 하라는 게 아니라, 언제라도 떠날 수 있게 행동 하라는 것 → 이게 자신을 더 좋은 엔지니어로 만들고, 성장 기회를 열어줌 → “자신을 대체 가능하게 만드는 것” , “직장에서 자신의 업무를 자동화하기” 와 비슷</summary></entry><entry><title type="html">개발자 온보딩 가이드</title><link href="https://kyjiya.github.io/2021/08/06/0001-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%98%A8%EB%B3%B4%EB%94%A9-%EA%B0%80%EC%9D%B4%EB%93%9C-_-%EC%B2%AB-90%EC%9D%BC%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B3%84%ED%9A%8D%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C.html" rel="alternate" type="text/html" title="개발자 온보딩 가이드" /><published>2021-08-06T02:50:13+09:00</published><updated>2021-08-06T02:50:13+09:00</updated><id>https://kyjiya.github.io/2021/08/06/0001-%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EC%98%A8%EB%B3%B4%EB%94%A9%20%EA%B0%80%EC%9D%B4%EB%93%9C%20_%20%EC%B2%AB%2090%EC%9D%BC%EC%9D%84%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EA%B3%84%ED%9A%8D%ED%95%B4%EC%95%BC%20%ED%95%A0%EA%B9%8C</id><content type="html" xml:base="https://kyjiya.github.io/2021/08/06/0001-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%98%A8%EB%B3%B4%EB%94%A9-%EA%B0%80%EC%9D%B4%EB%93%9C-_-%EC%B2%AB-90%EC%9D%BC%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B3%84%ED%9A%8D%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C.html">&lt;ul&gt;
  &lt;li&gt;온보딩은 신규 입사자가 환영받고 회사의 일부라는 느낌을 주고, 이직률도 감소 시킴&lt;/li&gt;
  &lt;li&gt;3A : 관리(Administration) → 동화(Assimilation) → 가속(Acceleration)&lt;/li&gt;
  &lt;li&gt;전반적인 지침은 HR이 제공하되, 매니저가 주도해서 실행하는 것이 중요&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[ 역할과 책임 ]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HR : 일을 시작하는데 필요한 모든 지원&lt;br /&gt;
→ 엔지니어링 매니저 및 C레벨 매니저들과 온보딩 미팅 잡기&lt;br /&gt;
→ 전사에서 사용하는 도구들 기본 설명&lt;br /&gt;
→ 팀에서 환영받는 느낌을 받도록&lt;br /&gt;
→ 출근 첫날 : 전사에 소개(그룹웨어 같은 것), 사용자 계정 추가, 급여 및 근무시간에 대한 상세 소개, 모든 도구와 장비 지급, 사무실 투어, 다른 동료들과 점심식사 제안&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;엔지니어링 매니저&lt;br /&gt;
→ 개발자를 팀 내부/외부에 소개&lt;br /&gt;
→ 팀 구조, 팀의 회의 일정, 개발 도구 및 티켓 시스템 등 소개&lt;br /&gt;
→ 1:1 체크인, 분기별 검토 미팅, 퍼포먼스 리뷰 등을 진행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;C-레벨 매니저&lt;br /&gt;
→ 회사의 일부라고 느끼게 하고, 회사의 미래 비전과 목표를 향해 즐겁게 일하도록&lt;br /&gt;
→ 이상적으로, CEO는 회사의 비전과 역사 소개, 제품 헤드는 제품과 사용자 소개, COO/CMO 는 현재 문제들에 대한 인사이트, CTO는 기술로드맵을 설명&lt;br /&gt;
→ 신규인력이 자신의 업무가 회사의 장기목표에 어떻게 기여하는지 확인하는 정기적인 미팅을 가지는게 중요&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[ 온보딩 프로그램 모범사례 ]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;충분한 시간을 주고, 초반에는 기대치를 낮춰야함, 압박감을 받지 않도록 하기&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;프리보딩pre-boarding&quot;&gt;프리보딩(Pre-boarding)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;최종 면접일과 근무 첫날 사이의 시간&lt;/li&gt;
  &lt;li&gt;이때는 지원자가 다른 회사를 인터뷰하고 있을수도 있다는걸 염두에 두어야 함&lt;/li&gt;
  &lt;li&gt;채용 최종 단자에서 지원자를 미래의 팀원,팀장 관리자에게 소개&lt;/li&gt;
  &lt;li&gt;지원자가 입사를 결정하면, 첫 출근전에 사무적인 일들은 다 끝내는게 좋음&lt;/li&gt;
  &lt;li&gt;출근 일주일 전에 해야할 일들&lt;br /&gt;
→ 출근 첫날에 대한 일정을 정리해서 보낼 것 : 언제 어디서 누구를 만나는지, 원격 회사라면 새 이메일 및 Slack 계정등에 대한 로그인 세부정보&lt;br /&gt;
→ 필요한 모든 계약서 및 서류 작성&lt;br /&gt;
→ 원격 근무에 대한 장비를 제공한다면 장비요청을 미리 작성완료 하도록&lt;br /&gt;
→ 회사의 문화, 비전, 미션에 자세한 정보 공유&lt;/li&gt;
  &lt;li&gt;좀 더 세심한 터치를 원한다면&lt;br /&gt;
→ 팀원들이 짧은 비디오/GIF로 신입사원 합류 축하 메시지를 보내거나&lt;br /&gt;
→ 간단히 손으로 적은 환영 메모/카드를 우편으로 보내기&lt;br /&gt;
→ 예산이 넉넉하다면, 회사 굿즈(SWAG, 컵/스티커/티셔츠 등등)를 보내주기&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;첫날&quot;&gt;첫날&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;첫인상은 중요. 신규 입사자에게 레드카펫 경험이 되어야 함&lt;/li&gt;
  &lt;li&gt;환영받는 느낌을 주고, 새 팀원들과 의미있는 상호작용을 할 수 있는 기회를 주는 걸 목표&lt;/li&gt;
  &lt;li&gt;채용 담당자와 인포멀한 커피타임을 통해서 서로에 대해 알고나서, 공식 체크인 미팅을 통해서 R &amp;amp; R을 명확히 하고 기대치를 서로 맞춤&lt;/li&gt;
  &lt;li&gt;회사 및 여러 팀들 소개 (이때 조직도를 훓어보면 좋음)&lt;/li&gt;
  &lt;li&gt;동료나 멘토 소개&lt;/li&gt;
  &lt;li&gt;Slack을 통해서 회사 전체에 신규 입사자 소개&lt;/li&gt;
  &lt;li&gt;담당하는 역할에 중요한 도구들의 매뉴얼 공유 또는 교육&lt;/li&gt;
  &lt;li&gt;회사 위키 및 기술문서 접근 방법 공유&lt;/li&gt;
  &lt;li&gt;아이스 브레이킹을 포함한 팀 점심 또는 원격의 경우 팀 화상통화&lt;/li&gt;
  &lt;li&gt;정기 팀 미팅을 포함해서 남은 한주 동안의 일정을 공유&lt;/li&gt;
  &lt;li&gt;관계 구축을 가속화 하기 위해 엔지니어링 매니저가 신규 입사자에게 물어볼수 있는 것들&lt;br /&gt;
→ 어떻게 최선을 다해서 일하시나요? 제가 뭘 도와드리면 되나요?&lt;br /&gt;
→ 어떤 작업들이 활력을 주고 당신을 흥분시키나요 ?&lt;br /&gt;
→ 하루 일정을 어떻게 계획하는 것이 좋으세요? 미팅을 오전/오후 언제 하는게 좋으세요 ?&lt;br /&gt;
→ 피드백을 주고 받는 것은 어떻습니까 ?&lt;br /&gt;
→ 어떻게 인정을 주거나 받는것을 선호하시나요 ?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;첫-주&quot;&gt;첫 주&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;첫주에는 회사, 제품 및 고객에 대해 학습&lt;/li&gt;
  &lt;li&gt;회사의 첫 시작 이야기, 가치, 비젼, 미션, 주요 마일스톤을 포함한 회사 문화와 역사에 대한 소개&lt;/li&gt;
  &lt;li&gt;제품에 대한 소개. SaaS 제품을 팔고 있다면, 신규 입사자에게 테스트 계정 만들어 주기&lt;/li&gt;
  &lt;li&gt;고객과 그들이 어떻게 제품을 사용하는지 소개. 제품에 대한 레코딩(실 사용 화면 녹화) 및 고객 인터뷰&lt;/li&gt;
  &lt;li&gt;기술 문서에 대한 소개&lt;/li&gt;
  &lt;li&gt;전사 회의 (all-hands meeting)에서 신규 입사자 소개&lt;/li&gt;
  &lt;li&gt;동료 / 멘토 체크인 예약&lt;/li&gt;
  &lt;li&gt;온보딩 피드백 받아서 향우 온보딩 프로그램 개선. 설문조사면 충분&lt;/li&gt;
  &lt;li&gt;그 주의 마지막 날에 체크인 : 성공한 것과 도움이 필요한 영역들 알기&lt;/li&gt;
  &lt;li&gt;신규 입사자와의 첫 킥오프 미팅에서 다루어야할 요점 들&lt;br /&gt;
→ Role clarity (역할 명확성) : 자신이 할 일들(resposiblities) 검토, JD 리뷰, 기대치 설정.&lt;br /&gt;
→ Development, compensation, and rewards (경력 개발 및 보상들) : 회사에서 지원하는 금전/비금전적 인센티브 및 커리어 패스 논의&lt;br /&gt;
→ Motivators at work(업무상 동기부요 요소) : 이전에 가장 즐겁고 활력넘쳤던 프로젝트 물어보기. 이를 통해서 지정할 업무 유형의 선택과 최상의 업무를 수행하는데 도움이 되는 조건 파악&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;처음-30일&quot;&gt;처음 30일&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;첫 달은 회사에서 어떻게 일이 진행되는지를 배우는 것을 포함&lt;/li&gt;
  &lt;li&gt;코딩 표준, 프로그래밍 프로세스, 워크플로우 프레임워크, 팀내의 로컬 개발 환경 설정 방법&lt;/li&gt;
  &lt;li&gt;소프트웨어 개발 방법론 소개&lt;/li&gt;
  &lt;li&gt;팀의 리포지토리 문서 공유&lt;/li&gt;
  &lt;li&gt;신규 입사자가 일반적인 버그 수정이나 예전 기능 업데이트등의 작은 작업으로 시작하도록 할 것. 시작하기 쉬운 일을 통해서 팀에 의미있는 기여를 했다는 성취감을 느끼게 할 것.&lt;/li&gt;
  &lt;li&gt;동료/멘토 체크인을 스케줄링하고 점차 빈도를 줄임&lt;/li&gt;
  &lt;li&gt;매주 매니저와 체크인을 통해서 신규 입사자가 성과를 내는데 필요한 모든 지원을 받고 있는지 확인 할 것&lt;/li&gt;
  &lt;li&gt;페어프로그래밍 세션은 신규 입사자가 전체 코드베이스 및 코딩 표준에 쉽게 익숙해지도록 하는 방법&lt;/li&gt;
  &lt;li&gt;이달 말에 심도 높은 체크인을 통해서, 성공한 것과 목표 검토, 지원이 필요한 영역 확인&lt;/li&gt;
  &lt;li&gt;향후 온보딩 프로그램에 대한 추가 피드백 요청&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;처음-60일&quot;&gt;처음 60일&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;다음 30일 동안 신규 입사자는 작업 환경과 새 팀원들에 대해 더 편안하게 느끼게 될 것&lt;/li&gt;
  &lt;li&gt;매니저는 신규 입사자에게 장기 Responibilities를 할당하는 것을 고려할 것&lt;/li&gt;
  &lt;li&gt;체크인 중에 매니저는 계속 신규입사자가 업무를 잘 수행하는데 필요한 모든 정보와 지원을 받는지 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;처음-90일&quot;&gt;처음 90일&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;세번째 달이 되면, 신규 입사자는 비교적 편안하게 토론에 참여하고 업무를 수행할 수 있음&lt;/li&gt;
  &lt;li&gt;이제 좀 더 독립적으로 작업할 수 있게 됨&lt;/li&gt;
  &lt;li&gt;이달 말까지 엔지니어링 매니저는 신규 입사자에게 좀 더 장기적인 목표를 구체화하고, 정기 1:1 체크인에서 진행&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;장기-성장-및-관리로의-전환&quot;&gt;장기 성장 및 관리로의 전환&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;온보딩에서 종종 간과되는 것은 장기적인 커리어 개발 단계로의 전환 과정&lt;/li&gt;
  &lt;li&gt;정기 1:1 미팅에서 온보딩에서 장기 개발로 전환할 것&lt;br /&gt;
→ 첫 30일 후부터 향후 3~6개월간의 개발을 지원할 방법들을 고려하기 시작할 것&lt;br /&gt;
→ 첫번째 퍼포먼스 리뷰 전까지 명확한 골과 타겟을 설정하도록 할 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[ 기타 온보딩 고려사항 ]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;신규 입사자가 필요할때 찾아볼수 있는 문서 정리는 꼭 필요&lt;br /&gt;
→ 내부 위키가 있으면 좋음&lt;/li&gt;
  &lt;li&gt;신규 입사자에게 필요한 기술 문서들&lt;br /&gt;
→ 소스 코드 및 팀의 Git Repo 접근 가이드&lt;br /&gt;
→ 프로젝트간 디펜던시, 버전번호 포함&lt;br /&gt;
→ 프로젝트에 사용된 도구들의 API 키와 Credentials&lt;br /&gt;
→ 샘플 데이터 및 입력 매뉴얼&lt;br /&gt;
→ 디자인 패턴 및 스타일 가이드&lt;br /&gt;
→ 모든 것이 잘 동작하는지 확인하는 테스트 스위트&lt;br /&gt;
→ 스테이징 / 프로덕선 서버에 대한 Deployment Credentials&lt;br /&gt;
→ 팀 멤버가 제품의 단점과 과거 실수에서 배울수 있는 것들을 정리한 배포 노트&lt;/li&gt;
  &lt;li&gt;프로젝트 또는 피쳐의 문서&lt;br /&gt;
→ 이 피쳐 또는 프로젝트의 목표&lt;br /&gt;
→ 같은 SaaS 제품이나 에코시스템의 다른 기능과 비교해서 각 기능은 어떻게 동작해야 하는지&lt;br /&gt;
→ 디자인 가이드라인, 사용자 흐름 및 코딩 표준&lt;br /&gt;
→ 팀이 프로젝트나 기능을 어떻게 처음부터 끝까지 작업하는지. 각각의 환경(개발,스테이징,프로덕션) 및 배포 담당자&lt;br /&gt;
→ 과거에 이 프로젝트 또는 유사한 프로젝트에서 처한 문제점들과 어떻게 해결 했는지&lt;br /&gt;
→ 현재 어떤게 문제이고, 어떤 해결책들을 작업하는 중인지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[ 원격 회사를 위한 팁 ]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;신규 입사자에게 근무 첫날에 물질적인 선물 보내기&lt;/li&gt;
  &lt;li&gt;매니저와 팀 리더는 처음부터 커뮤니케이션 기대치를 명확히 할 것 (슬랙의 메시지 하나로 일일 스탠드업은 건너뛸수 있다던가)&lt;/li&gt;
  &lt;li&gt;주간 체크인, 전사 미팅등 빠지면 안되는 사항들에 동의할 것&lt;/li&gt;
  &lt;li&gt;올바른 도구를 선택하고 회사 전체의 동의를 얻을 것(이메일을 선호하는데 Slack을 설치하는 것은 의미가 없을 수도)&lt;/li&gt;
  &lt;li&gt;가능하면 최선의 작업환경을 위해 장비/환경/인터넷 접속 비용을 지원&lt;/li&gt;
  &lt;li&gt;신규입사자와 직원들이 경계를 설정할수 있도록 도울 것(유연 근무나 타임존이 다른 경우 등)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[ 온보딩 성과 측정 ]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;적어도 한번 이상의 설문조사를 보낼 것 (HR전문가는 7일,30일,60일,90일에 설문조사를 보내는 것을 권장)&lt;/li&gt;
  &lt;li&gt;물어볼 질문들&lt;br /&gt;
→ 일하기 좋은 곳으로 [우리 회사]를 추천합니다.&lt;br /&gt;
→ [우리 회사]는 내가 다른곳에서 비슷한 역할을 했을때 보다 더 나아갈수 있게 동기를 부여합니다.&lt;br /&gt;
→ 나는 내 롤에 필요한 시스템과 도구를 사용하는데 자신이 있습니다.&lt;br /&gt;
→ 나는 내 일을 잘하기 위해 아직 배워야 할 것이 무엇인지 잘 알고 있다.&lt;br /&gt;
→ 나는 내 롤이 [우리 회사]의 조직 목표에 어떻게 기여하는지 이해하고 있습니다.&lt;br /&gt;
→ 지금까지 내 역할은 JD에서 얘기했던 것과 일치합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[ 온보딩 개선 시작하기 ]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;일정과 목표 계획하기 : 첫날, 첫 주, 30일, 60일, 90일 동안의 주요 마일 스톤&lt;/li&gt;
  &lt;li&gt;HR팀이 매니저 및 모든 관련자를 지원 하도록 : 개인별 체크리스트, 관리자와 팀 리더 교육&lt;/li&gt;
  &lt;li&gt;매일의 워크플로우에 문서를 포함 : 변경사항과 업데이트를 기록하는 습관 만들기(신규 입사자에게 오래된 변경 전 문서를 주지 않도록)&lt;/li&gt;
  &lt;li&gt;신규 입사자의 입장이 되어보기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“어떤 식으로든 신규 입사자를 도운 것은 작든 크든 몇 년간 기억될 것”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://news.hada.io/topic?id=4643&quot; style=&quot;text-decoration:none&quot;&gt;https://news.hada.io/topic?id=4643&lt;/a&gt;&lt;/p&gt;</content><author><name>Kwon Yong Jun</name></author><summary type="html">온보딩은 신규 입사자가 환영받고 회사의 일부라는 느낌을 주고, 이직률도 감소 시킴 3A : 관리(Administration) → 동화(Assimilation) → 가속(Acceleration) 전반적인 지침은 HR이 제공하되, 매니저가 주도해서 실행하는 것이 중요</summary></entry></feed>